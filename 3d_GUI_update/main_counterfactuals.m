function counterfactual_simul = main_counterfactuals(data)




ex_BASELINE=[ data.allvars.oo_.SmoothedShocks.epsiA ... 
    data.allvars.oo_.SmoothedShocks.epsiJ ...
    data.allvars.oo_.SmoothedShocks.epsiK ...
    data.allvars.oo_.SmoothedShocks.epsiSe ... 
    data.allvars.oo_.SmoothedShocks.epsiSm ...
    data.allvars.oo_.SmoothedShocks.epsiSB... 
data.allvars.oo_.SmoothedShocks.epsiWb ...
data.allvars.oo_.SmoothedShocks.epsiWe ...
data.allvars.oo_.SmoothedShocks.epsiH... 
data.allvars.oo_.SmoothedShocks.epsiHd... 
data.allvars.oo_.SmoothedShocks.epsiHk ...
data.allvars.oo_.SmoothedShocks.epsimarkup_m ...
data.allvars.oo_.SmoothedShocks.epsimarkup_F... 
data.allvars.oo_.SmoothedShocks.epsiEC...
data.allvars.oo_.SmoothedShocks.epsiECAB...
data.allvars.oo_.SmoothedShocks.epsiEL...
data.allvars.oo_.SmoothedShocks.epsiEbH... 
data.allvars.oo_.SmoothedShocks.epsiEbF... 
];
   
y0_BASELINE=data.allvars.oo_.dr.ys;
dr_BASELINE=data.allvars.oo_.dr;
iorder=1;
%re-simulate the system--> this should be identical/close to the model output
 y_=simult_(y0_BASELINE,dr_BASELINE,ex_BASELINE,iorder);

variables_BASELINE=y_(:,2:end);
%set prudential policy in the counterfactual exercise

%=================================================
% set_parameter_values_policy(data);==>this seems unnecessary?
data.counterfactual_simul=run_model_counterfactual(data);%==> also this part is the same as the previous run? 
y0_CF=data.counterfactual_simul.oo_.dr.ys;
dr_CF=data.counterfactual_simul.oo_.dr;
iorder=1;
 y_CF=simult_(y0_BASELINE,dr_CF,ex_BASELINE,iorder);%smoother swith baseline initial values and shocks. decision rules are different
%y_ ==> smoothed data counterfactual specification
% variables_CF=[y_CF(1,1:end);y_CF(7,1:end);y_CF(8,1:end);y_CF(12,1:end);y_CF(13,1:end);y_CF(14,1:end);y_CF(171,1:end);y_CF(172,1:end)];
variables_CF=y_CF(:,2:end);

counterfactual_simul.baseline=variables_BASELINE;
counterfactual_simul.counterfactual=variables_CF;

end